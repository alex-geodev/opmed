/* tslint:disable */
/* eslint-disable */
/**
 * Salary_Stone
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface SalaryBase
 */
export interface SalaryBase {
    /**
     * 
     * @type {string}
     * @memberof SalaryBase
     */
    'job_title': string;
    /**
     * 
     * @type {string}
     * @memberof SalaryBase
     */
    'job_desc': string;
    /**
     * 
     * @type {string}
     * @memberof SalaryBase
     */
    'job_location': string;
    /**
     * 
     * @type {number}
     * @memberof SalaryBase
     */
    'job_sal_upper': number;
    /**
     * 
     * @type {number}
     * @memberof SalaryBase
     */
    'job_sal_lower': number;
    /**
     * 
     * @type {number}
     * @memberof SalaryBase
     */
    'job_sal_avg': number;
    /**
     * 
     * @type {string}
     * @memberof SalaryBase
     */
    'job_sector': string;
    /**
     * 
     * @type {string}
     * @memberof SalaryBase
     */
    'company': string;
    /**
     * 
     * @type {number}
     * @memberof SalaryBase
     */
    'company_size_lower': number;
    /**
     * 
     * @type {number}
     * @memberof SalaryBase
     */
    'company_size_upper': number;
    /**
     * 
     * @type {string}
     * @memberof SalaryBase
     */
    'company_hq_location': string;
    /**
     * 
     * @type {string}
     * @memberof SalaryBase
     */
    'company_ownership': string;
    /**
     * 
     * @type {string}
     * @memberof SalaryBase
     */
    'company_industry': string;
    /**
     * 
     * @type {string}
     * @memberof SalaryBase
     */
    'employee_degree': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SalaryBase
     */
    'employee_skills': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof SalaryBase
     */
    'rating': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary General
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalMetricsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary General
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generalMetricsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generalMetricsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MetricsApi.generalMetricsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricsApiFp(configuration)
    return {
        /**
         * 
         * @summary General
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalMetricsGet(options?: any): AxiosPromise<void> {
            return localVarFp.generalMetricsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     * 
     * @summary General
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public generalMetricsGet(options?: AxiosRequestConfig) {
        return MetricsApiFp(this.configuration).generalMetricsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SalaryApi - axios parameter creator
 * @export
 */
export const SalaryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create
         * @param {SalaryBase} salaryBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalaryCreatePost: async (salaryBase: SalaryBase, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salaryBase' is not null or undefined
            assertParamExists('createSalaryCreatePost', 'salaryBase', salaryBase)
            const localVarPath = `/salary/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salaryBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete
         * @param {string} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalaryDeletePost: async (payload: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('deleteSalaryDeletePost', 'payload', payload)
            const localVarPath = `/salary/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (payload !== undefined) {
                localVarQueryParameter['payload'] = payload;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSalaryPost: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('findSalaryPost', 'body', body)
            const localVarPath = `/salary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Predict
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictSalaryPredictPost: async (jobdesc: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobdesc' is not null or undefined
            assertParamExists('predictSalaryPredictPost', 'jobdesc', jobdesc)
            const localVarPath = `/salary/predict`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobdesc !== undefined) {
                localVarQueryParameter['jobdesc'] = jobdesc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rec
         * @param {string} resume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recSalaryRecommendGet: async (resume: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resume' is not null or undefined
            assertParamExists('recSalaryRecommendGet', 'resume', resume)
            const localVarPath = `/salary/recommend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (resume !== undefined) {
                localVarQueryParameter['resume'] = resume;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Skills
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsSalarySkillsPost: async (jobdesc: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobdesc' is not null or undefined
            assertParamExists('skillsSalarySkillsPost', 'jobdesc', jobdesc)
            const localVarPath = `/salary/skills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobdesc !== undefined) {
                localVarQueryParameter['jobdesc'] = jobdesc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Skillsalbin
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsalbinSalarySkillsalbinGet: async (jobdesc: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobdesc' is not null or undefined
            assertParamExists('skillsalbinSalarySkillsalbinGet', 'jobdesc', jobdesc)
            const localVarPath = `/salary/skillsalbin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobdesc !== undefined) {
                localVarQueryParameter['jobdesc'] = jobdesc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Skillsim
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsimSalarySkillsimGet: async (jobdesc: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobdesc' is not null or undefined
            assertParamExists('skillsimSalarySkillsimGet', 'jobdesc', jobdesc)
            const localVarPath = `/salary/skillsim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobdesc !== undefined) {
                localVarQueryParameter['jobdesc'] = jobdesc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSalaryTestGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salary/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalaryApi - functional programming interface
 * @export
 */
export const SalaryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalaryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create
         * @param {SalaryBase} salaryBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalaryCreatePost(salaryBase: SalaryBase, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalaryCreatePost(salaryBase, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SalaryApi.createSalaryCreatePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete
         * @param {string} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalaryDeletePost(payload: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalaryDeletePost(payload, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SalaryApi.deleteSalaryDeletePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Find
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSalaryPost(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSalaryPost(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SalaryApi.findSalaryPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Predict
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictSalaryPredictPost(jobdesc: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictSalaryPredictPost(jobdesc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SalaryApi.predictSalaryPredictPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Rec
         * @param {string} resume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recSalaryRecommendGet(resume: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recSalaryRecommendGet(resume, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SalaryApi.recSalaryRecommendGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Skills
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillsSalarySkillsPost(jobdesc: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillsSalarySkillsPost(jobdesc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SalaryApi.skillsSalarySkillsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Skillsalbin
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillsalbinSalarySkillsalbinGet(jobdesc: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillsalbinSalarySkillsalbinGet(jobdesc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SalaryApi.skillsalbinSalarySkillsalbinGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Skillsim
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillsimSalarySkillsimGet(jobdesc: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillsimSalarySkillsimGet(jobdesc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SalaryApi.skillsimSalarySkillsimGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSalaryTestGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testSalaryTestGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SalaryApi.testSalaryTestGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SalaryApi - factory interface
 * @export
 */
export const SalaryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalaryApiFp(configuration)
    return {
        /**
         * 
         * @summary Create
         * @param {SalaryBase} salaryBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalaryCreatePost(salaryBase: SalaryBase, options?: any): AxiosPromise<void> {
            return localVarFp.createSalaryCreatePost(salaryBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete
         * @param {string} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalaryDeletePost(payload: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalaryDeletePost(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSalaryPost(body: object, options?: any): AxiosPromise<void> {
            return localVarFp.findSalaryPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Predict
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictSalaryPredictPost(jobdesc: string, options?: any): AxiosPromise<void> {
            return localVarFp.predictSalaryPredictPost(jobdesc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rec
         * @param {string} resume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recSalaryRecommendGet(resume: string, options?: any): AxiosPromise<void> {
            return localVarFp.recSalaryRecommendGet(resume, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Skills
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsSalarySkillsPost(jobdesc: string, options?: any): AxiosPromise<void> {
            return localVarFp.skillsSalarySkillsPost(jobdesc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Skillsalbin
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsalbinSalarySkillsalbinGet(jobdesc: string, options?: any): AxiosPromise<void> {
            return localVarFp.skillsalbinSalarySkillsalbinGet(jobdesc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Skillsim
         * @param {string} jobdesc 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsimSalarySkillsimGet(jobdesc: string, options?: any): AxiosPromise<void> {
            return localVarFp.skillsimSalarySkillsimGet(jobdesc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSalaryTestGet(options?: any): AxiosPromise<void> {
            return localVarFp.testSalaryTestGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalaryApi - object-oriented interface
 * @export
 * @class SalaryApi
 * @extends {BaseAPI}
 */
export class SalaryApi extends BaseAPI {
    /**
     * 
     * @summary Create
     * @param {SalaryBase} salaryBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public createSalaryCreatePost(salaryBase: SalaryBase, options?: AxiosRequestConfig) {
        return SalaryApiFp(this.configuration).createSalaryCreatePost(salaryBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete
     * @param {string} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public deleteSalaryDeletePost(payload: string, options?: AxiosRequestConfig) {
        return SalaryApiFp(this.configuration).deleteSalaryDeletePost(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public findSalaryPost(body: object, options?: AxiosRequestConfig) {
        return SalaryApiFp(this.configuration).findSalaryPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Predict
     * @param {string} jobdesc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public predictSalaryPredictPost(jobdesc: string, options?: AxiosRequestConfig) {
        return SalaryApiFp(this.configuration).predictSalaryPredictPost(jobdesc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rec
     * @param {string} resume 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public recSalaryRecommendGet(resume: string, options?: AxiosRequestConfig) {
        return SalaryApiFp(this.configuration).recSalaryRecommendGet(resume, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Skills
     * @param {string} jobdesc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public skillsSalarySkillsPost(jobdesc: string, options?: AxiosRequestConfig) {
        return SalaryApiFp(this.configuration).skillsSalarySkillsPost(jobdesc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Skillsalbin
     * @param {string} jobdesc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public skillsalbinSalarySkillsalbinGet(jobdesc: string, options?: AxiosRequestConfig) {
        return SalaryApiFp(this.configuration).skillsalbinSalarySkillsalbinGet(jobdesc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Skillsim
     * @param {string} jobdesc 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public skillsimSalarySkillsimGet(jobdesc: string, options?: AxiosRequestConfig) {
        return SalaryApiFp(this.configuration).skillsimSalarySkillsimGet(jobdesc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public testSalaryTestGet(options?: AxiosRequestConfig) {
        return SalaryApiFp(this.configuration).testSalaryTestGet(options).then((request) => request(this.axios, this.basePath));
    }
}



